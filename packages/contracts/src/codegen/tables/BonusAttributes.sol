// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16("mud"), bytes16("BonusAttributes")));
bytes32 constant BonusAttributesTableId = _tableId;

struct BonusAttributesData {
  int32 healthMax;
  int32 strength;
  int32 staminaRegen;
  int32 staminaCost;
  int32 moveSpeed;
  int32 heal;
  int32 rangeMin;
  int32 rangeMax;
}

library BonusAttributes {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](8);
    _schema[0] = SchemaType.INT32;
    _schema[1] = SchemaType.INT32;
    _schema[2] = SchemaType.INT32;
    _schema[3] = SchemaType.INT32;
    _schema[4] = SchemaType.INT32;
    _schema[5] = SchemaType.INT32;
    _schema[6] = SchemaType.INT32;
    _schema[7] = SchemaType.INT32;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](8);
    _fieldNames[0] = "healthMax";
    _fieldNames[1] = "strength";
    _fieldNames[2] = "staminaRegen";
    _fieldNames[3] = "staminaCost";
    _fieldNames[4] = "moveSpeed";
    _fieldNames[5] = "heal";
    _fieldNames[6] = "rangeMin";
    _fieldNames[7] = "rangeMax";
    return ("BonusAttributes", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get healthMax */
  function getHealthMax(bytes32 key) internal view returns (int32 healthMax) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 0);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get healthMax (using the specified store) */
  function getHealthMax(IStore _store, bytes32 key) internal view returns (int32 healthMax) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 0);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set healthMax */
  function setHealthMax(bytes32 key, int32 healthMax) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 0, abi.encodePacked((healthMax)));
  }

  /** Set healthMax (using the specified store) */
  function setHealthMax(IStore _store, bytes32 key, int32 healthMax) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    _store.setField(_tableId, _primaryKeys, 0, abi.encodePacked((healthMax)));
  }

  /** Get strength */
  function getStrength(bytes32 key) internal view returns (int32 strength) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 1);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get strength (using the specified store) */
  function getStrength(IStore _store, bytes32 key) internal view returns (int32 strength) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 1);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set strength */
  function setStrength(bytes32 key, int32 strength) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 1, abi.encodePacked((strength)));
  }

  /** Set strength (using the specified store) */
  function setStrength(IStore _store, bytes32 key, int32 strength) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    _store.setField(_tableId, _primaryKeys, 1, abi.encodePacked((strength)));
  }

  /** Get staminaRegen */
  function getStaminaRegen(bytes32 key) internal view returns (int32 staminaRegen) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 2);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get staminaRegen (using the specified store) */
  function getStaminaRegen(IStore _store, bytes32 key) internal view returns (int32 staminaRegen) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 2);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set staminaRegen */
  function setStaminaRegen(bytes32 key, int32 staminaRegen) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 2, abi.encodePacked((staminaRegen)));
  }

  /** Set staminaRegen (using the specified store) */
  function setStaminaRegen(IStore _store, bytes32 key, int32 staminaRegen) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    _store.setField(_tableId, _primaryKeys, 2, abi.encodePacked((staminaRegen)));
  }

  /** Get staminaCost */
  function getStaminaCost(bytes32 key) internal view returns (int32 staminaCost) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 3);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get staminaCost (using the specified store) */
  function getStaminaCost(IStore _store, bytes32 key) internal view returns (int32 staminaCost) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 3);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set staminaCost */
  function setStaminaCost(bytes32 key, int32 staminaCost) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 3, abi.encodePacked((staminaCost)));
  }

  /** Set staminaCost (using the specified store) */
  function setStaminaCost(IStore _store, bytes32 key, int32 staminaCost) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    _store.setField(_tableId, _primaryKeys, 3, abi.encodePacked((staminaCost)));
  }

  /** Get moveSpeed */
  function getMoveSpeed(bytes32 key) internal view returns (int32 moveSpeed) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 4);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get moveSpeed (using the specified store) */
  function getMoveSpeed(IStore _store, bytes32 key) internal view returns (int32 moveSpeed) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 4);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set moveSpeed */
  function setMoveSpeed(bytes32 key, int32 moveSpeed) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 4, abi.encodePacked((moveSpeed)));
  }

  /** Set moveSpeed (using the specified store) */
  function setMoveSpeed(IStore _store, bytes32 key, int32 moveSpeed) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    _store.setField(_tableId, _primaryKeys, 4, abi.encodePacked((moveSpeed)));
  }

  /** Get heal */
  function getHeal(bytes32 key) internal view returns (int32 heal) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 5);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get heal (using the specified store) */
  function getHeal(IStore _store, bytes32 key) internal view returns (int32 heal) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 5);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set heal */
  function setHeal(bytes32 key, int32 heal) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 5, abi.encodePacked((heal)));
  }

  /** Set heal (using the specified store) */
  function setHeal(IStore _store, bytes32 key, int32 heal) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    _store.setField(_tableId, _primaryKeys, 5, abi.encodePacked((heal)));
  }

  /** Get rangeMin */
  function getRangeMin(bytes32 key) internal view returns (int32 rangeMin) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 6);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get rangeMin (using the specified store) */
  function getRangeMin(IStore _store, bytes32 key) internal view returns (int32 rangeMin) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 6);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set rangeMin */
  function setRangeMin(bytes32 key, int32 rangeMin) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 6, abi.encodePacked((rangeMin)));
  }

  /** Set rangeMin (using the specified store) */
  function setRangeMin(IStore _store, bytes32 key, int32 rangeMin) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    _store.setField(_tableId, _primaryKeys, 6, abi.encodePacked((rangeMin)));
  }

  /** Get rangeMax */
  function getRangeMax(bytes32 key) internal view returns (int32 rangeMax) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 7);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get rangeMax (using the specified store) */
  function getRangeMax(IStore _store, bytes32 key) internal view returns (int32 rangeMax) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 7);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set rangeMax */
  function setRangeMax(bytes32 key, int32 rangeMax) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 7, abi.encodePacked((rangeMax)));
  }

  /** Set rangeMax (using the specified store) */
  function setRangeMax(IStore _store, bytes32 key, int32 rangeMax) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    _store.setField(_tableId, _primaryKeys, 7, abi.encodePacked((rangeMax)));
  }

  /** Get the full data */
  function get(bytes32 key) internal view returns (BonusAttributesData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 key) internal view returns (BonusAttributesData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = _store.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 key,
    int32 healthMax,
    int32 strength,
    int32 staminaRegen,
    int32 staminaCost,
    int32 moveSpeed,
    int32 heal,
    int32 rangeMin,
    int32 rangeMax
  ) internal {
    bytes memory _data = encode(healthMax, strength, staminaRegen, staminaCost, moveSpeed, heal, rangeMin, rangeMax);

    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 key,
    int32 healthMax,
    int32 strength,
    int32 staminaRegen,
    int32 staminaCost,
    int32 moveSpeed,
    int32 heal,
    int32 rangeMin,
    int32 rangeMax
  ) internal {
    bytes memory _data = encode(healthMax, strength, staminaRegen, staminaCost, moveSpeed, heal, rangeMin, rangeMax);

    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    _store.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 key, BonusAttributesData memory _table) internal {
    set(
      key,
      _table.healthMax,
      _table.strength,
      _table.staminaRegen,
      _table.staminaCost,
      _table.moveSpeed,
      _table.heal,
      _table.rangeMin,
      _table.rangeMax
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 key, BonusAttributesData memory _table) internal {
    set(
      _store,
      key,
      _table.healthMax,
      _table.strength,
      _table.staminaRegen,
      _table.staminaCost,
      _table.moveSpeed,
      _table.heal,
      _table.rangeMin,
      _table.rangeMax
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (BonusAttributesData memory _table) {
    _table.healthMax = (int32(uint32(Bytes.slice4(_blob, 0))));

    _table.strength = (int32(uint32(Bytes.slice4(_blob, 4))));

    _table.staminaRegen = (int32(uint32(Bytes.slice4(_blob, 8))));

    _table.staminaCost = (int32(uint32(Bytes.slice4(_blob, 12))));

    _table.moveSpeed = (int32(uint32(Bytes.slice4(_blob, 16))));

    _table.heal = (int32(uint32(Bytes.slice4(_blob, 20))));

    _table.rangeMin = (int32(uint32(Bytes.slice4(_blob, 24))));

    _table.rangeMax = (int32(uint32(Bytes.slice4(_blob, 28))));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    int32 healthMax,
    int32 strength,
    int32 staminaRegen,
    int32 staminaCost,
    int32 moveSpeed,
    int32 heal,
    int32 rangeMin,
    int32 rangeMax
  ) internal view returns (bytes memory) {
    return abi.encodePacked(healthMax, strength, staminaRegen, staminaCost, moveSpeed, heal, rangeMin, rangeMax);
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.deleteRecord(_tableId, _primaryKeys);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    _store.deleteRecord(_tableId, _primaryKeys);
  }
}
